#!/bin/bash

set -e

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

# Obtenir le chemin du buildpack
basedir="$( cd -P "$( dirname "$0" )" && pwd )"
BUILDPACK_DIR="$(readlink -f ${basedir}/..)"

# Charger les fonctions communes
source ${BUILDPACK_DIR}/lib/common.sh

# Mode debug si nécessaire
if [ -n "$BUILDPACK_DEBUG" ]; then
  set -x
fi

# Version de Tempo par défaut
TEMPO_VERSION="${TEMPO_VERSION:-2.4.0}"

echo "-----> Buildpack Tempo v${TEMPO_VERSION}"

# Fonction d'installation de Tempo
install_tempo() {
  local BUILD_DIR="${1}"
  local CACHE_DIR="${2}"

  tempo_dist="tempo-linux-amd64"
  tempo_archive="tempo-${TEMPO_VERSION}.linux-amd64.tar.gz"
  tempo_url="https://github.com/grafana/tempo/releases/download/v${TEMPO_VERSION}/${tempo_archive}"

  # Vérifier si une ancienne version existe dans le cache
  if [[ -f "$CACHE_DIR/.TEMPO_VERSION" ]]; then
    old_version=$(cat $CACHE_DIR/.TEMPO_VERSION)
    if [[ $old_version != $TEMPO_VERSION ]]; then
      echo "-----> Nouvelle version détectée (${old_version} -> ${TEMPO_VERSION})"
      echo "       Nettoyage du cache..."
      rm -f $CACHE_DIR/*.tar.gz
    fi
  fi

  # Télécharger Tempo si nécessaire
  if [[ ! -f "$CACHE_DIR/${tempo_archive}" ]]; then
    echo "-----> Téléchargement de Tempo ${TEMPO_VERSION}..."
    echo "       URL: ${tempo_url}"
    
    # Télécharger avec affichage de la progression
    if ! curl -L --progress-bar --fail --retry 3 --retry-delay 2 -o ${CACHE_DIR}/${tempo_archive} "${tempo_url}"; then
      echo "ERREUR: Échec du téléchargement de Tempo depuis ${tempo_url}"
      echo "       Vérifiez que la version ${TEMPO_VERSION} existe sur GitHub"
      exit 1
    fi
    
    # Vérifier que le fichier a bien été téléchargé
    if [ ! -f "${CACHE_DIR}/${tempo_archive}" ]; then
      echo "ERREUR: Le fichier ${tempo_archive} n'a pas été téléchargé correctement"
      exit 1
    fi
    
    # Vérifier la taille du fichier (au moins 1MB)
    FILESIZE=$(stat -c%s "${CACHE_DIR}/${tempo_archive}" 2>/dev/null || stat -f%z "${CACHE_DIR}/${tempo_archive}" 2>/dev/null)
    if [ "$FILESIZE" -lt 1000000 ]; then
      echo "ERREUR: Le fichier téléchargé est trop petit (${FILESIZE} octets), il est probablement corrompu"
      echo "Contenu du fichier :"
      head -n 10 "${CACHE_DIR}/${tempo_archive}"
      exit 1
    fi
    
    echo $TEMPO_VERSION > ${CACHE_DIR}/.TEMPO_VERSION
    echo "       Téléchargement terminé (${FILESIZE} octets)"
  else
    echo "-----> Utilisation de Tempo ${TEMPO_VERSION} depuis le cache"
  fi

  # Créer le répertoire de destination
  mkdir -p "${BUILD_DIR}/tempo"
  
  # Vérifier l'archive avant extraction
  echo "-----> Vérification de l'archive..."
  if ! tar tzf "${CACHE_DIR}/${tempo_archive}" >/dev/null 2>&1; then
    echo "ERREUR: L'archive est corrompue ou au mauvais format"
    echo "        Type de fichier : $(file "${CACHE_DIR}/${tempo_archive}")"
    exit 1
  fi

  # Extraire l'archive
  echo "-----> Extraction de Tempo..."
  if ! tar xvzf "${CACHE_DIR}/${tempo_archive}" -C "${BUILD_DIR}/tempo"; then
    echo "ERREUR: Échec de l'extraction de l'archive"
    echo "        Vérifiez les permissions et l'espace disque disponible"
    exit 1
  fi
  
  # Vérifier que l'exécutable existe
  if [ ! -f "${BUILD_DIR}/tempo/${tempo_dist}" ]; then
    echo "ERREUR: Exécutable Tempo non trouvé après extraction"
    ls -la ${BUILD_DIR}/tempo/
    exit 1
  fi
  
  # Renommer l'exécutable
  mv "${BUILD_DIR}/tempo/${tempo_dist}" "${BUILD_DIR}/tempo/tempo"
  chmod +x "${BUILD_DIR}/tempo/tempo"
  
  echo "       Extraction terminée"
}

# Créer le répertoire de cache
mkdir -p $CACHE_DIR

# Charger les variables d'environnement
export_env_dir "$ENV_DIR"

# Installer Tempo
install_tempo ${BUILD_DIR} ${CACHE_DIR}

# Configuration de Tempo
echo "-----> Configuration de Tempo..."
mkdir -p ${BUILD_DIR}/tempo/etc

# Copier les scripts
echo "-----> Copie des scripts de démarrage..."
cp ${BUILDPACK_DIR}/opt/boot.sh ${BUILD_DIR}/
cp ${BUILDPACK_DIR}/opt/gen_tempo_conf.rb ${BUILD_DIR}/
cp ${BUILDPACK_DIR}/opt/tempo.yaml.erb ${BUILD_DIR}/

chmod +x ${BUILD_DIR}/boot.sh
chmod +x ${BUILD_DIR}/gen_tempo_conf.rb

# Exporter BUILDPACK_DIR pour le script Ruby
export BUILDPACK_DIR

# Générer la configuration Tempo
if [ -f "${BUILD_DIR}/tempo.yaml" ]; then
  echo "       Utilisation de tempo.yaml fourni"
  cp "${BUILD_DIR}/tempo.yaml" "${BUILD_DIR}/tempo/etc/tempo.yaml"
elif [ -n "$TEMPO_CONFIG_YAML" ]; then
  echo "       Utilisation de TEMPO_CONFIG_YAML"
  echo "$TEMPO_CONFIG_YAML" > "${BUILD_DIR}/tempo/etc/tempo.yaml"
else
  echo "       Génération de la configuration depuis le template"
  if ! ruby ${BUILD_DIR}/gen_tempo_conf.rb > "${BUILD_DIR}/tempo/etc/tempo.yaml" 2>${BUILD_DIR}/ruby_error.log; then
    echo "ERREUR: Échec de la génération de la configuration"
    cat ${BUILD_DIR}/ruby_error.log
    exit 1
  fi
fi

# Vérifier que la configuration a été créée
if [ ! -f "${BUILD_DIR}/tempo/etc/tempo.yaml" ]; then
  echo "ERREUR: Fichier de configuration tempo.yaml non créé"
  exit 1
fi

echo "       Configuration créée: ${BUILD_DIR}/tempo/etc/tempo.yaml"

# Nettoyage
rm -f ${BUILD_DIR}/gen_tempo_conf.rb ${BUILD_DIR}/tempo.yaml.erb

echo "-----> Buildpack Tempo installé avec succès!"